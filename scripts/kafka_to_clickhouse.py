# scripts/kafka_to_clickhouse.py

from __future__ import annotations
import json
import logging
from typing import Any, Dict, List
from datetime import datetime
from decimal import Decimal
from clickhouse_driver import Client
from cryptography.fernet import Fernet
from kafka import KafkaConsumer

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        # logging.FileHandler('kafka_to_clickhouse.log') # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# =============================================================================
# === –í–ê–ñ–ù–û: –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –ö–õ–Æ–ß –ò–ó –í–´–í–û–î–ê kafka_producer.py ====================
# === –ü–†–ò–ú–ï–†: b'DpY1VLwmMeRO18y5BTLIibyzd-BheI5N1NpxCoHdMBo=' =================
# === !!! –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –ö–õ–Æ–ß –°–û–í–ü–ê–î–ê–ï–¢ –° –¢–ï–ú, –ß–¢–û –í kafka_producer.py !!! ====
# =============================================================================
ENCRYPTION_KEY = b'dI6S2mer6xD6JpDcATx5r_wFE78Rf1TQC6bVg29ZjKE='
cipher = Fernet(ENCRYPTION_KEY)

logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.")


# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ ===
def decrypt_phone_or_email(value: str | None) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å.
    """
    if not value:
        return ""
    try:
        decrypted_value = cipher.decrypt(value.encode()).decode()
        logger.debug(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return decrypted_value
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {e}. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫–∞–∫ –µ—Å—Ç—å.")
        return value  # fallback: –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å


def normalize_phone(phone: str | None) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX.
    """
    if not phone:
        return ""
    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = ''.join(filter(str.isdigit, phone))
    if len(digits) == 11 and digits.startswith('8'):
        digits = '7' + digits[1:]
    if len(digits) == 10:
        digits = '7' + digits
    if len(digits) == 11 and digits.startswith('7'):
        return f"+{digits}"
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    logger.debug(f"–¢–µ–ª–µ—Ñ–æ–Ω '{phone}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.")
    return phone


def normalize_email(email: str | None) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç email: –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã.
    """
    if not email:
        return ""
    return email.strip().lower()


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç ===
def safe_parse_datetime(datetime_str: str | None) -> datetime:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏ epoch.
    """
    if not datetime_str:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01T00:00:00.")
        return datetime(1970, 1, 1)
    try:
        # fromisoformat –º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å 'Z' –≤ –∫–æ–Ω—Ü–µ, –∑–∞–º–µ–Ω–∏–º –Ω–∞ +00:00 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if datetime_str.endswith('Z'):
            parsed_dt = datetime.fromisoformat(datetime_str[:-1] + '+00:00')
        else:
            parsed_dt = datetime.fromisoformat(datetime_str)
        return parsed_dt
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏ '{datetime_str}': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01T00:00:00.")
        return datetime(1970, 1, 1)


def safe_parse_date(
        date_str: str | None) -> datetime:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º datetime –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º .date() –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã (YYYY-MM-DD). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏ epoch.
    """
    if not date_str:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        parsed_dt = datetime.strptime(date_str, "%Y-%m-%d")
        return parsed_dt
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 9000, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ docker-compose.yml
client = Client(host='localhost', port=9000)


# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü RAW ===
def create_raw_tables() -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö piccha_raw –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    –¢–∏–ø—ã ID –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ String.
    """
    client.execute("CREATE DATABASE IF NOT EXISTS piccha_raw")

    # –¢–∞–±–ª–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.stores (
        store_id String,
        store_name String,
        store_network String,
        store_type_description String,
        type String,
        categories Array(String),
        manager_name String,
        manager_phone String,
        manager_email String,
        location_country String,
        location_city String,
        location_street String,
        location_house String,
        location_postal_code String,
        location_latitude Float64,
        location_longitude Float64,
        opening_hours_mon_fri String,
        opening_hours_sat String,
        opening_hours_sun String,
        accepts_online_orders UInt8,
        delivery_available UInt8,
        warehouse_connected UInt8,
        last_inventory_date Date
    ) ENGINE = MergeTree() ORDER BY store_id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.products (
        id String,
        name String,
        group String,
        description String,
        kbju_calories Float32,
        kbju_protein Float32,
        kbju_fat Float32,
        kbju_carbohydrates Float32,
        price Float32,
        unit String,
        origin_country String,
        expiry_days UInt16,
        is_organic UInt8,
        barcode String,
        manufacturer_name String,
        manufacturer_country String,
        manufacturer_website String,
        manufacturer_inn String
    ) ENGINE = MergeTree() ORDER BY id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.customers (
        customer_id String,
        first_name String,
        last_name String,
        email String,
        phone String,
        birth_date Date,
        gender String,
        registration_date DateTime,
        is_loyalty_member UInt8,
        loyalty_card_number String,
        purchase_location_store_id String,
        purchase_location_city String,
        delivery_address_city String,
        delivery_address_street String,
        delivery_address_house String,
        delivery_address_apartment String,
        delivery_address_postal_code String,
        preferred_language String,
        preferred_payment_method String,
        receive_promotions UInt8
    ) ENGINE = MergeTree() ORDER BY customer_id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫ (–ø–ª–æ—Å–∫–∞—è, –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä –≤ —á–µ–∫–µ)
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.purchases (
        purchase_id String,
        customer_id String,
        product_id String,
        quantity Int32,
        price Decimal(10, 2),
        purchase_date DateTime
    ) ENGINE = MergeTree() ORDER BY (purchase_id, product_id)
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.purchase_items (
        purchase_id String,
        product_id String,
        item_name String,
        category String,
        quantity UInt32,
        unit String,
        price_per_unit Float32,
        total_price Float32,
        kbju_calories Float32,
        kbju_protein Float32,
        kbju_fat Float32,
        kbju_carbohydrates Float32,
        manufacturer_name String
    ) ENGINE = MergeTree() ORDER BY (purchase_id, product_id)
    """)


# === –û—Å–Ω–æ–≤–Ω–æ–π consumer ===
def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Kafka, —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ClickHouse.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ kafka_to_clickhouse consumer...")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    try:
        create_raw_tables()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã piccha_raw —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Kafka
    try:
        consumer = KafkaConsumer(
            'piccha_raw',
            bootstrap_servers=['localhost:9092'],
            auto_offset_reset='earliest',  # –ß–∏—Ç–∞–µ–º —Å –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
            enable_auto_commit=True,
            group_id='clickhouse-loader-v2',  # –ò–∑–º–µ–Ω–µ–Ω group_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            value_deserializer=lambda x: json.loads(x.decode('utf-8')),
            # session_timeout_ms=45000, # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–µ–¥–ª–µ–Ω–Ω—ã–π
            # heartbeat_interval_ms=3000 # –ò–Ω—Ç–µ—Ä–≤–∞–ª heartbeat
        )
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}")
        return

    logger.info("‚è≥ –û–∂–∏–¥–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka —Ç–æ–ø–∏–∫–∞ 'piccha_raw'...")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in consumer:
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            raw_doc: Dict[str, Any] = message.value
            collection_type: str = raw_doc.pop('_collection', 'unknown')

            logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_type}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            if collection_type == 'stores':
                doc = raw_doc

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ last_inventory_date
                last_inventory_date_dt = safe_parse_date(doc.get('last_inventory_date'))

                # –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É stores
                client.execute("""
                INSERT INTO piccha_raw.stores VALUES
                """, [(
                    doc['store_id'],
                    doc['store_name'],
                    doc['store_network'],
                    doc['store_type_description'],
                    doc['type'],
                    doc['categories'],
                    doc['manager']['name'],
                    normalize_phone(decrypt_phone_or_email(doc['manager'].get('phone'))),
                    doc['manager']['email'],  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ —à–∏—Ñ—Ä—É–µ—Ç—Å—è
                    doc['location']['country'],
                    doc['location']['city'],
                    doc['location']['street'],
                    doc['location']['house'],
                    doc['location']['postal_code'],
                    float(doc['location']['coordinates']['latitude']),
                    float(doc['location']['coordinates']['longitude']),
                    doc['opening_hours']['mon_fri'],
                    doc['opening_hours']['sat'],
                    doc['opening_hours']['sun'],
                    int(doc['accepts_online_orders']),
                    int(doc['delivery_available']),
                    int(doc['warehouse_connected']),
                    last_inventory_date_dt.date()  # –í—Å—Ç–∞–≤–∫–∞ Date
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: stores - {doc['store_id']}")

            elif collection_type == 'products':
                doc = raw_doc

                # –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É products
                client.execute("""
                INSERT INTO piccha_raw.products VALUES
                """, [(
                    doc['id'],
                    doc['name'],
                    doc['group'],
                    doc['description'],
                    float(doc['kbju']['calories']),
                    float(doc['kbju']['protein']),
                    float(doc['kbju']['fat']),
                    float(doc['kbju']['carbohydrates']),
                    float(doc['price']),
                    doc['unit'],
                    doc['origin_country'],
                    int(doc['expiry_days']),
                    int(doc['is_organic']),
                    doc['barcode'],
                    doc['manufacturer']['name'],
                    doc['manufacturer']['country'],
                    doc['manufacturer']['website'].strip(),
                    doc['manufacturer']['inn']
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: products - {doc['id']}")

            elif collection_type == 'customers':
                doc = raw_doc

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
                birth_date_dt = safe_parse_date(doc.get('birth_date'))
                registration_date_dt = safe_parse_datetime(doc.get('registration_date'))

                # –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É customers
                client.execute("""
                INSERT INTO piccha_raw.customers VALUES
                """, [(
                    doc['customer_id'],
                    doc['first_name'],
                    doc['last_name'],
                    normalize_email(decrypt_phone_or_email(doc.get('email'))),
                    normalize_phone(decrypt_phone_or_email(doc.get('phone'))),
                    birth_date_dt.date(),  # –í—Å—Ç–∞–≤–∫–∞ Date
                    doc['gender'],
                    registration_date_dt,  # –í—Å—Ç–∞–≤–∫–∞ DateTime
                    int(doc['is_loyalty_member']),
                    doc['loyalty_card_number'],
                    doc['purchase_location']['store_id'],
                    doc['purchase_location']['city'],
                    doc['delivery_address']['city'],
                    doc['delivery_address']['street'],
                    doc['delivery_address']['house'],
                    doc['delivery_address'].get('apartment', ''),  # –ú–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    doc['delivery_address']['postal_code'],
                    doc['preferences']['preferred_language'],
                    doc['preferences']['preferred_payment_method'],
                    int(doc['preferences']['receive_promotions'])
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: customers - {doc['customer_id']}")

            elif collection_type == 'purchases':
                doc = raw_doc

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
                purchase_datetime_dt = safe_parse_datetime(doc.get('purchase_datetime'))

                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ piccha_raw.purchases –æ–∂–∏–¥–∞–µ—Ç –ø–ª–æ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏
                # –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä (item) –≤ –∑–∞–∫–∞–∑–µ.
                items_list = doc.get('items', [])
                inserted_items_count = 0
                for item in items_list:
                    try:
                        # --- –í—Å—Ç–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä) ---
                        client.execute("""
                        INSERT INTO piccha_raw.purchases VALUES
                        """, [(
                            doc['purchase_id'],
                            doc['customer']['customer_id'],
                            item['product_id'],  # product_id –∏–∑ item
                            int(item['quantity']),  # quantity –∏–∑ item
                            Decimal(str(item['price_per_unit'])),  # price_per_unit –∏–∑ item -> Decimal(10,2)
                            purchase_datetime_dt  # purchase_date –∏–∑ –æ–±—â–µ–π –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
                        )])

                        # --- –í—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏ ---
                        client.execute("""
                        INSERT INTO piccha_raw.purchase_items VALUES
                        """, [(
                            doc['purchase_id'],
                            item['product_id'],
                            item['name'],
                            item['category'],
                            int(item['quantity']),
                            item['unit'],
                            float(item['price_per_unit']),
                            float(item['total_price']),
                            float(item['kbju']['calories']),
                            float(item['kbju']['protein']),
                            float(item['kbju']['fat']),
                            float(item['kbju']['carbohydrates']),
                            item['manufacturer']['name']
                        )])
                        inserted_items_count += 1

                    except KeyError as ke:
                        logger.error(
                            f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ item '{item.get('product_id', 'UNKNOWN')}': {ke}")
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç item, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö
                        continue
                    except Exception as ie:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ item '{item.get('product_id', 'UNKNOWN')}': {ie}")
                        continue

                logger.info(
                    f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: purchases - {doc['purchase_id']} ({inserted_items_count} items)")

            else:
                logger.warning(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_type}")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–µ
            continue

    logger.info("üèÅ Consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()