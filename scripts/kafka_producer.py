# scripts/kafka_to_clickhouse.py

from __future__ import annotations
import json
import logging
from typing import Any, Dict, List, cast
from datetime import datetime
from decimal import Decimal
from clickhouse_driver import Client
from cryptography.fernet import Fernet
from kafka import KafkaConsumer

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á –∏–∑ kafka_producer.py) ===
# !!! –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–ª—é—á –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ kafka_producer.py !!!
ENCRYPTION_KEY = b'S_kG1-1EwjfkFUfukpPaHGZ92KlWKkdlpLLVeskPeEM='
cipher = Fernet(ENCRYPTION_KEY)

logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.")


# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ ===
def decrypt_phone_or_email(value: str | None) -> str:
    if not value:
        return ""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å.
        return cipher.decrypt(value.encode()).decode()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{value[:10]}...': {e}")
        return value


def normalize_phone(phone: str | None) -> str:
    if not phone:
        return ""
    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return phone.strip()


def normalize_email(email: str | None) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç email: –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã."""
    return email.strip().lower() if email else ""


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç ===
def parse_iso_datetime(date_str: str | None) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏, –≤–∫–ª—é—á–∞—è 'Z'. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏_epoch_ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not date_str:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)
    try:
        # fromisoformat –º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å 'Z' –≤ –∫–æ–Ω—Ü–µ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å
        if date_str.endswith('Z'):
            # –ó–∞–º–µ–Ω—è–µ–º 'Z' –Ω–∞ '+00:00' –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è UTC
            dt = datetime.fromisoformat(date_str[:-1] + '+00:00')
        else:
            dt = datetime.fromisoformat(date_str)
        return dt
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)


def parse_iso_date(
        date_str: str | None) -> datetime:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º datetime, —Ç–∞–∫ –∫–∞–∫ ClickHouse –æ–∂–∏–¥–∞–µ—Ç Date, –Ω–æ –ø–∏—Ç–æ–Ω—Å–∫–∏–π date –ª–µ–≥—á–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ datetime.date()
    """–ü–∞—Ä—Å–∏—Ç ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏_epoch_ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not date_str:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        dt = datetime.strptime(date_str, "%Y-%m-%d")
        return dt
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1970-01-01.")
        return datetime(1970, 1, 1)


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 9000, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ docker-compose.yml
client = Client(host='localhost', port=9000)


# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü RAW ===
def create_raw_tables() -> None:
    client.execute("CREATE DATABASE IF NOT EXISTS piccha_raw")

    # –¢–∞–±–ª–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.stores (
        store_id String,
        store_name String,
        store_network String,
        store_type_description String,
        type String,
        categories Array(String),
        manager_name String,
        manager_phone String,
        manager_email String,
        location_country String,
        location_city String,
        location_street String,
        location_house String,
        location_postal_code String,
        location_latitude Float64,
        location_longitude Float64,
        opening_hours_mon_fri String,
        opening_hours_sat String,
        opening_hours_sun String,
        accepts_online_orders UInt8,
        delivery_available UInt8,
        warehouse_connected UInt8,
        last_inventory_date Date
    ) ENGINE = MergeTree() ORDER BY store_id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.products (
        id String,
        name String,
        group String,
        description String,
        kbju_calories Float32,
        kbju_protein Float32,
        kbju_fat Float32,
        kbju_carbohydrates Float32,
        price Float32,
        unit String,
        origin_country String,
        expiry_days UInt16,
        is_organic UInt8,
        barcode String,
        manufacturer_name String,
        manufacturer_country String,
        manufacturer_website String,
        manufacturer_inn String
    ) ENGINE = MergeTree() ORDER BY id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.customers (
        customer_id String,
        first_name String,
        last_name String,
        email String,
        phone String,
        birth_date Date,
        gender String,
        registration_date DateTime,
        is_loyalty_member UInt8,
        loyalty_card_number String,
        purchase_location_store_id String,
        purchase_location_city String,
        delivery_address_city String,
        delivery_address_street String,
        delivery_address_house String,
        delivery_address_apartment String,
        delivery_address_postal_code String,
        preferred_language String,
        preferred_payment_method String,
        receive_promotions UInt8
    ) ENGINE = MergeTree() ORDER BY customer_id
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫ (–ø–ª–æ—Å–∫–∞—è, –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä –≤ —á–µ–∫–µ)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∑—è—Ç–∞ –∏–∑ DESCRIBE piccha_raw.purchases
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.purchases (
        purchase_id String,
        customer_id String,
        product_id String,
        quantity Int32,
        price Decimal(10, 2),
        purchase_date DateTime
    ) ENGINE = MergeTree() ORDER BY (purchase_id, product_id)
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    client.execute("""
    CREATE TABLE IF NOT EXISTS piccha_raw.purchase_items (
        purchase_id String,
        product_id String,
        item_name String,
        category String,
        quantity UInt32,
        unit String,
        price_per_unit Float32,
        total_price Float32,
        kbju_calories Float32,
        kbju_protein Float32,
        kbju_fat Float32,
        kbju_carbohydrates Float32,
        manufacturer_name String
    ) ENGINE = MergeTree() ORDER BY (purchase_id, product_id)
    """)


# === –û—Å–Ω–æ–≤–Ω–æ–π consumer ===
def main() -> None:
    create_raw_tables()

    consumer = KafkaConsumer(
        'piccha_raw',
        bootstrap_servers=['localhost:9092'],
        auto_offset_reset='earliest',  # –ß–∏—Ç–∞–µ–º —Å –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
        enable_auto_commit=True,
        group_id='clickhouse-loader',
        value_deserializer=lambda x: json.loads(x.decode('utf-8'))
    )

    logger.info("‚è≥ –û–∂–∏–¥–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka...")

    for message in consumer:
        try:
            raw_doc: Dict[str, Any] = message.value
            coll: str = raw_doc.pop('_collection', 'unknown')

            if coll == 'stores':
                doc = raw_doc
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ store: {doc.get('store_id')}")

                last_inventory_date_dt = parse_iso_date(doc.get('last_inventory_date'))

                client.execute("""
                INSERT INTO piccha_raw.stores VALUES
                """, [(
                    doc['store_id'],
                    doc['store_name'],
                    doc['store_network'],
                    doc['store_type_description'],
                    doc['type'],
                    doc['categories'],
                    doc['manager']['name'],
                    normalize_phone(decrypt_phone_or_email(doc['manager'].get('phone'))),
                    doc['manager']['email'],  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ —à–∏—Ñ—Ä—É–µ—Ç—Å—è
                    doc['location']['country'],
                    doc['location']['city'],
                    doc['location']['street'],
                    doc['location']['house'],
                    doc['location']['postal_code'],
                    float(doc['location']['coordinates']['latitude']),
                    float(doc['location']['coordinates']['longitude']),
                    doc['opening_hours']['mon_fri'],
                    doc['opening_hours']['sat'],
                    doc['opening_hours']['sun'],
                    int(doc['accepts_online_orders']),
                    int(doc['delivery_available']),
                    int(doc['warehouse_connected']),
                    last_inventory_date_dt.date()  # –í—Å—Ç–∞–≤–∫–∞ Date
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: stores - {doc['store_id']}")

            elif coll == 'products':
                doc = raw_doc
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ product: {doc.get('id')}")

                client.execute("""
                INSERT INTO piccha_raw.products VALUES
                """, [(
                    doc['id'],
                    doc['name'],
                    doc['group'],
                    doc['description'],
                    float(doc['kbju']['calories']),
                    float(doc['kbju']['protein']),
                    float(doc['kbju']['fat']),
                    float(doc['kbju']['carbohydrates']),
                    float(doc['price']),
                    doc['unit'],
                    doc['origin_country'],
                    int(doc['expiry_days']),
                    int(doc['is_organic']),
                    doc['barcode'],
                    doc['manufacturer']['name'],
                    doc['manufacturer']['country'],
                    doc['manufacturer']['website'].strip(),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    doc['manufacturer']['inn']
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: products - {doc['id']}")

            elif coll == 'customers':
                doc = raw_doc
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ customer: {doc.get('customer_id')}")

                birth_date_dt = parse_iso_date(doc.get('birth_date'))
                registration_date_dt = parse_iso_datetime(doc.get('registration_date'))

                client.execute("""
                INSERT INTO piccha_raw.customers VALUES
                """, [(
                    doc['customer_id'],
                    doc['first_name'],
                    doc['last_name'],
                    normalize_email(decrypt_phone_or_email(doc.get('email'))),
                    normalize_phone(decrypt_phone_or_email(doc.get('phone'))),
                    birth_date_dt.date(),  # –í—Å—Ç–∞–≤–∫–∞ Date
                    doc['gender'],
                    registration_date_dt,  # –í—Å—Ç–∞–≤–∫–∞ DateTime
                    int(doc['is_loyalty_member']),
                    doc['loyalty_card_number'],
                    doc['purchase_location']['store_id'],
                    doc['purchase_location']['city'],
                    doc['delivery_address']['city'],
                    doc['delivery_address']['street'],
                    doc['delivery_address']['house'],
                    doc['delivery_address'].get('apartment', ''),  # –ú–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    doc['delivery_address']['postal_code'],
                    doc['preferences']['preferred_language'],
                    doc['preferences']['preferred_payment_method'],
                    int(doc['preferences']['receive_promotions'])
                )])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: customers - {doc['customer_id']}")

            elif coll == 'purchases':
                doc = raw_doc
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ purchase: {doc.get('purchase_id')}")

                purchase_datetime_dt = parse_iso_datetime(doc.get('purchase_datetime'))

                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ piccha_raw.purchases –æ–∂–∏–¥–∞–µ—Ç –ø–ª–æ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏
                # –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä (item) –≤ –∑–∞–∫–∞–∑–µ.
                for item in doc.get('items', []):
                    client.execute("""
                    INSERT INTO piccha_raw.purchases VALUES
                    """, [(
                        doc['purchase_id'],
                        doc['customer']['customer_id'],
                        item['product_id'],  # product_id –∏–∑ item
                        int(item['quantity']),  # quantity –∏–∑ item
                        Decimal(str(item['price_per_unit'])),  # price_per_unit –∏–∑ item -> Decimal(10,2)
                        purchase_datetime_dt  # purchase_date –∏–∑ –æ–±—â–µ–π –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
                    )])

                    # –¢–∞–∫–∂–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ detail —Ç–∞–±–ª–∏—Ü—É purchase_items
                    client.execute("""
                    INSERT INTO piccha_raw.purchase_items VALUES
                    """, [(
                        doc['purchase_id'],
                        item['product_id'],
                        item['name'],
                        item['category'],
                        int(item['quantity']),
                        item['unit'],
                        float(item['price_per_unit']),
                        float(item['total_price']),
                        float(item['kbju']['calories']),
                        float(item['kbju']['protein']),
                        float(item['kbju']['fat']),
                        float(item['kbju']['carbohydrates']),
                        item['manufacturer']['name']
                    )])

                logger.info(
                    f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ClickHouse: purchases - {doc['purchase_id']} ({len(doc.get('items', []))} items)")

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {coll}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)  # exc_info=True –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∞
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–µ
            continue

    logger.info("üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ ClickHouse –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).")


if __name__ == "__main__":
    main()